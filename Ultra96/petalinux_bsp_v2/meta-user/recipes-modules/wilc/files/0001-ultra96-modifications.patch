From 210bf13fb901acbf81085b3b4c655a0829b435ea Mon Sep 17 00:00:00 2001
From: Thomas Nizan <tnizan@witekio.com>
Date: Thu, 21 Jul 2022 15:07:59 +0000
Subject: [PATCH] Ultra96v2 modifications 15.6

Apply modifications made for Ultra96 v2 on 15.5 driver to 15.6 driver

Signed-off-by: Thomas Nizan <tnizan@witekio.com>
---
 Kconfig    |  1 +
 Makefile   | 14 +++++++++++++-
 cfg80211.c | 19 +++++++++++++++----
 debugfs.h  | 16 ++++++++++++++++
 netdev.c   |  9 +++++++++
 netdev.h   |  1 +
 power.c    |  8 ++++++++
 sdio.c     | 38 +++++++++++++++++++++++++++++++-------
 wlan.c     | 25 ++++++++++++++++++++-----
 wlan.h     |  6 ++++--
 wlan_cfg.c |  4 ++--
 11 files changed, 120 insertions(+), 21 deletions(-)

diff --git a/Kconfig b/Kconfig
index 9b8e0a6c950e..ce8fb6f7a4a1 100644
--- a/Kconfig
+++ b/Kconfig
@@ -36,6 +36,7 @@ config WILC_SPI
 config WILC_HW_OOB_INTR
 	bool "WILC out of band interrupt"
 	depends on WILC_SDIO
+	depends on WILC1000_SDIO
 	default n
 	help
 	  This option enables out-of-band interrupt support for the WILC1000 &
diff --git a/Makefile b/Makefile
index 64c39aac1344..89132bc87af9 100644
--- a/Makefile
+++ b/Makefile
@@ -1,5 +1,6 @@
 # SPDX-License-Identifier: GPL-2.0
-ccflags-y += -I$(src)/ -DWILC_DEBUGFS
+#ccflags-y += -I$(src)/ -DWILC_DEBUGFS
+ccflags-y += -I$(src)/ 
 
 wilc-objs := cfg80211.o netdev.o mon.o \
 			hif.o wlan_cfg.o wlan.o sysfs.o power.o bt.o debugfs.o
@@ -11,3 +12,14 @@ wilc-sdio-objs += sdio.o
 obj-$(CONFIG_WILC_SPI) += wilc-spi.o
 wilc-spi-objs += $(wilc-objs)
 wilc-spi-objs += spi.o
+
+all:
+	$(MAKE) -C $(KERNEL_SRC) M=$(CURDIR) modules
+
+modules_install:
+	$(MAKE) -C $(KERNEL_SRC) M=$(CURDIR) modules_install
+
+clean:
+	rm -f *.o *~ core .depend .*.cmd *.ko *.mod.c
+	rm -f Module.markers Module.symvers modules.order
+	rm -rf .tmp_versions Modules.symversa
diff --git a/cfg80211.c b/cfg80211.c
index 86da7d2fd0d7..8d185958f49f 100644
--- a/cfg80211.c
+++ b/cfg80211.c
@@ -1859,6 +1859,8 @@ static struct wireless_dev *add_virtual_intf(struct wiphy *wiphy,
 	struct wireless_dev *wdev;
 	u8 iftype;
 
+	pr_info("add_virtual_intf name[%s] vnum[%d], nl-type[%d]\n", name, wl->vif_num, type);
+
 	/* check if interface type is mointor because AP mode is supported over
 	 * monitor interface. No need to increment interface count check if
 	 * monitor mode is associated with AP interface. The same approach is
@@ -1897,6 +1899,7 @@ static struct wireless_dev *add_virtual_intf(struct wiphy *wiphy,
 		}
 		wdev = &vif->priv.wdev;
 		srcu_read_unlock(&wl->srcu, srcu_idx);
+		pr_info("add_virtual_intf:monitor name[%s] vnum[%d], idx[%d], wilc-type[%d], nl-type[%d]\n", vif->ndev->name, wl->vif_num, vif->idx, vif->iftype, wdev->iftype);
 		return wdev;
 	}
 
@@ -1909,9 +1912,6 @@ validate_interface:
 	}
 	mutex_unlock(&wl->vif_mutex);
 
-	pr_info("add_interaface [%d] name[%s] type[%d]\n", wl->vif_num,
-		name, type);
-
 	switch (type) {
 	case NL80211_IFTYPE_STATION:
 		iftype = WILC_STATION_MODE;
@@ -1938,6 +1938,8 @@ static int del_virtual_intf(struct wiphy *wiphy, struct wireless_dev *wdev)
 	struct wilc *wl = wiphy_priv(wiphy);
 	struct wilc_vif *vif;
 
+	pr_info("del_virtual_intf type[%d]\n", wdev->iftype);
+
 	/* delete the monitor mode interface */
 	if (wdev->iftype == NL80211_IFTYPE_MONITOR) {
 		wilc_wfi_deinit_mon_interface(wl, true);
@@ -1948,9 +1950,17 @@ static int del_virtual_intf(struct wiphy *wiphy, struct wireless_dev *wdev)
 	    wdev->iftype == NL80211_IFTYPE_P2P_GO)
 		wilc_wfi_deinit_mon_interface(wl, true);
 	vif = netdev_priv(wdev->netdev);
-	cfg80211_unregister_netdevice(vif->ndev);
+	pr_info("del_virtual_intf name[%s] vnum[%d], idx[%d], wilc-type[%d], nl-type[%d]\n",
+		vif->ndev->name, wl->vif_num, vif->idx, vif->iftype, wdev->iftype);
 	vif->monitor_flag = 0;
 
+	// If this interface was created by probe()->wilc_cfg80211_init(), then
+	// it was created when the driver was initialized. Only remove()->wilc_netdev_cleanup()
+	// shall be allowed to unregister this interface.
+	if (vif->primary_if) return 0;
+
+	cfg80211_unregister_netdevice(vif->ndev);
+
 	/* update the vif list */
 	mutex_lock(&wl->vif_mutex);
 	/* delete the interface from rcu list */
@@ -2206,6 +2216,7 @@ int wilc_cfg80211_init(struct wilc **wilc, struct device *dev, int io_type,
 		goto free_wq;
 	}
 
+	vif->primary_if = 1;
 	wilc_sysfs_init(wl);
 
 	return 0;
diff --git a/debugfs.h b/debugfs.h
index 13b0e40d568c..1402e146aa8a 100644
--- a/debugfs.h
+++ b/debugfs.h
@@ -25,26 +25,42 @@
 
 extern atomic_t WILC_DEBUG_REGION;
 
+#if defined(WILC_DEBUGFS)
 #define PRINT_D(netdev, region, format, ...) do { \
 	if (atomic_read(&WILC_DEBUG_REGION)&(region))\
 		netdev_dbg(netdev, "DBG [%s: %d] "format, __func__, __LINE__,\
 		   ##__VA_ARGS__); } \
 	while (0)
+#else
+#define PRINT_D(netdev, region, format, ...) do { } while (0)
+#endif
 
+#if defined(WILC_DEBUGFS)
 #define PRINT_INFO(netdev, region, format, ...) do { \
 	if (atomic_read(&WILC_DEBUG_REGION)&(region))\
 		netdev_info(netdev, "INFO [%s]"format, __func__, \
 		##__VA_ARGS__); } \
 	while (0)
+#else
+#define PRINT_INFO(netdev, region, format, ...) do { } while (0)
+#endif
 
+#if defined(WILC_DEBUGFS)
 #define PRINT_WRN(netdev, region, format, ...) do { \
 	if (atomic_read(&WILC_DEBUG_REGION)&(region))\
 		netdev_warn(netdev, "WRN [%s: %d]"format, __func__, __LINE__,\
 		    ##__VA_ARGS__); } \
 	while (0)
+#else
+#define PRINT_WRN(netdev, region, format, ...) do { } while (0)
+#endif
 
+#if defined(WILC_DEBUGFS)
 #define PRINT_ER(netdev, format, ...) netdev_err(netdev, "ERR [%s:%d] "format,\
 	__func__, __LINE__, ##__VA_ARGS__)
+#else
+#define PRINT_ER(netdev, format, ...) do { } while (0)
+#endif
 
 #ifdef WILC_DEBUGFS
 int wilc_debugfs_init(void);
diff --git a/netdev.c b/netdev.c
index a209f873d92c..59f4fd1f23ed 100644
--- a/netdev.c
+++ b/netdev.c
@@ -188,6 +188,9 @@ static int init_irq(struct net_device *dev)
 	struct wilc_vif *vif = netdev_priv(dev);
 	struct wilc *wl = vif->wilc;
 
+// This is no longer supported, the firmware for the WILC3000 does not yank the IRQN line back to the gpio
+return 0;
+
 	if (wl->dev_irq_num <= 0)
 		return 0;
 
@@ -730,6 +733,7 @@ static int wlan_initialize_threads(struct net_device *dev)
 	}
 	wait_for_completion(&wilc->txq_thread_started);
 
+#if defined(WILC_DEBUGFS)
 	if (!debug_running) {
 		PRINT_INFO(vif->ndev, INIT_DBG,
 			   "Creating kthread for Debugging\n");
@@ -744,6 +748,7 @@ static int wlan_initialize_threads(struct net_device *dev)
 		debug_running = true;
 		wait_for_completion(&wilc->debug_thread_started);
 	}
+#endif
 
 	return 0;
 }
@@ -1317,6 +1322,8 @@ struct wilc_vif *wilc_netdev_ifc_init(struct wilc *wl, const char *name,
 	vif = netdev_priv(ndev);
 	ndev->ieee80211_ptr = &vif->priv.wdev;
 	strcpy(ndev->name, name);
+
+	vif->primary_if = 0;
 	vif->wilc = wl;
 	vif->ndev = ndev;
 	ndev->ml_priv = vif;
@@ -1353,6 +1360,8 @@ struct wilc_vif *wilc_netdev_ifc_init(struct wilc *wl, const char *name,
 	mutex_unlock(&wl->vif_mutex);
 	synchronize_srcu(&wl->srcu);
 
+	pr_info("wilc_netdev_ifc_init name[%s] vnum[%d], idx[%d], wilc-type[%d] nl-type[%d]\n", ndev->name, wl->vif_num, vif->idx, vif_type, type);
+
 	return vif;
 }
 
diff --git a/netdev.h b/netdev.h
index 9516e575b9d7..8814a6c27ca9 100644
--- a/netdev.h
+++ b/netdev.h
@@ -202,6 +202,7 @@ struct wilc_vif {
 	u8 idx;
 	u8 iftype;
 	int monitor_flag;
+	int primary_if;
 	int mac_opened;
 	u32 mgmt_reg_stypes;
 	struct net_device_stats netstats;
diff --git a/power.c b/power.c
index 6c59e0bd10a0..c2ac5cbb978e 100644
--- a/power.c
+++ b/power.c
@@ -57,6 +57,14 @@ int wilc_of_parse_power_pins(struct wilc *wilc)
  */
 void wilc_wlan_power(struct wilc *wilc, bool on)
 {
+	pr_info("wifi_pm : %d\n", on);
+
+    // pr_info("WILC DRIVER SETUP TO NOT TOUCH CHIP_EN and RESETN!\n");
+
+    return;
+
+    // To late in the game to use these, this will undo the SDIO setup that the Xilinx driver has already done
+    // plus these were moved out of the wilc device tree child node so that pwrseq_simple can properly use them
 	if (!gpio_is_valid(wilc->power.gpios.chip_en) ||
 	    !gpio_is_valid(wilc->power.gpios.reset)) {
 		/* In case SDIO power sequence driver is used to power this
diff --git a/sdio.c b/sdio.c
index 492ac0e9116d..7917dd2eb915 100644
--- a/sdio.c
+++ b/sdio.c
@@ -429,13 +429,22 @@ static int wilc_sdio_write_reg(struct wilc *wilc, u32 addr, u32 data)
 				"Failed cmd 52, write reg (%08x) ...\n", addr);
 	} else {
 		struct sdio_cmd53 cmd;
+		u32 * pData = kmalloc(sizeof(*pData), GFP_KERNEL);
+		if (!pData) {
+			dev_err(&func->dev, "kmalloc fail\n");
+			return 1;
+		}
+
+		*pData = data;
 
 		/**
 		 *      set the AHB address
 		 **/
 		ret = wilc_sdio_set_func0_csa_address(wilc, addr);
-		if (ret)
+		if (ret) {
+			kfree(pData);
 			return ret;
+		}
 
 		cmd.read_write = 1;
 		cmd.function = 0;
@@ -443,12 +452,16 @@ static int wilc_sdio_write_reg(struct wilc *wilc, u32 addr, u32 data)
 		cmd.block_mode = 0;
 		cmd.increment = 1;
 		cmd.count = 4;
-		cmd.buffer = (u8 *)&data;
+		cmd.buffer = (u8 *)pData;
 		cmd.block_size = sdio_priv->block_size;
 		ret = wilc_sdio_cmd53(wilc, &cmd);
-		if (ret)
+		if (ret) {
 			dev_err(&func->dev,
 				"Failed cmd53, write reg (%08x)...\n", addr);
+			kfree(pData);
+			return ret;
+		}
+		kfree(pData);
 	}
 
 	return ret;
@@ -549,10 +562,17 @@ static int wilc_sdio_read_reg(struct wilc *wilc, u32 addr, u32 *data)
 		*data = cmd.data;
 	} else {
 		struct sdio_cmd53 cmd;
+		u32 * pData = kmalloc(sizeof(*pData), GFP_KERNEL);
+		if (!pData) {
+			dev_err(&func->dev, "kmalloc fail\n");
+			return 1;
+		}
 
 		ret = wilc_sdio_set_func0_csa_address(wilc, addr);
-		if (ret)
+		if (ret) {
+			kfree(pData);
 			return ret;
+		}
 
 		cmd.read_write = 0;
 		cmd.function = 0;
@@ -560,15 +580,18 @@ static int wilc_sdio_read_reg(struct wilc *wilc, u32 addr, u32 *data)
 		cmd.block_mode = 0;
 		cmd.increment = 1;
 		cmd.count = 4;
-		cmd.buffer = (u8 *)data;
+		cmd.buffer = (u8 *)pData;
 
 		cmd.block_size = sdio_priv->block_size;
 		ret = wilc_sdio_cmd53(wilc, &cmd);
 		if (ret) {
 			dev_err(&func->dev,
 				"Failed cmd53, read reg (%08x)...\n", addr);
+			kfree(pData);
 			return ret;
 		}
+		*data = *pData;
+		kfree(pData);
 	}
 
 	le32_to_cpus(data);
@@ -679,11 +702,12 @@ static int wilc_sdio_init(struct wilc *wilc, bool resume)
 		func->card->host->ios.clock);
 
 	/* Patch for sdio interrupt latency issue */
-	ret = pm_runtime_get_sync(mmc_dev(func->card->host));
+	pm_runtime_get_sync(mmc_dev(func->card->host));
+	/*ret = pm_runtime_get_sync(mmc_dev(func->card->host));
 	if (ret < 0) {
 		pm_runtime_put_noidle(mmc_dev(func->card->host));
 		return ret;
-	}
+	}*/
 
 	init_waitqueue_head(&sdio_intr_waitqueue);
 	sdio_priv->irq_gpio = (wilc->io_type == WILC_HIF_SDIO_GPIO_IRQ);
diff --git a/wlan.c b/wlan.c
index 59adbf224e20..1dd8d1a6e9c7 100644
--- a/wlan.c
+++ b/wlan.c
@@ -815,17 +815,21 @@ static void chip_wakeup_wilc3000(struct wilc *wilc, int source)
 	do {
 		hif_func->hif_write_reg(wilc, wakeup_reg, wakeup_reg_val |
 							  wakeup_bit);
+
+        /* Wait for the chip to stabilize*/
+        usleep_range(1000, 1100);
+
 		/* Check the clock status */
 		hif_func->hif_read_reg(wilc, clk_status_reg,
 				       &clk_status_reg_val);
 
 		/*
 		 * in case of clocks off, wait 1ms, and check it again.
-		 * if still off, wait for another 1ms, for a total wait of 3ms.
+		 * if still off, wait for another 1ms, for a total wait of 6ms.
 		 * If still off, redo the wake up sequence
 		 */
 		while ((clk_status_reg_val & clk_status_bit) == 0 &&
-		       (++trials % 4) != 0) {
+		       (++trials % 6) != 0) {
 			/* Wait for the chip to stabilize*/
 			usleep_range(1000, 1100);
 
@@ -902,23 +906,32 @@ int wilc_wlan_handle_txq(struct wilc *wilc, u32 *txq_count)
 	int ret = 0;
 	int counter;
 	int timeout;
-	u32 vmm_table[WILC_VMM_TBL_SIZE];
+	u32 * vmm_table; // [WILC_VMM_TBL_SIZE];
 	u8 ac_pkt_num_to_chip[NQUEUES] = {0, 0, 0, 0};
 	const struct wilc_hif_func *func;
 	int srcu_idx;
 	u8 *txb = wilc->tx_buffer;
 	struct wilc_vif *vif;
 
+	vmm_table = kmalloc(sizeof(*vmm_table) * WILC_VMM_TBL_SIZE, GFP_KERNEL);
+	if (!vmm_table) {
+		PRINT_ER(vif->ndev, "kmalloc fail vmm_table\n");
+		return -1;
+	}
+
 	if (!wilc->txq_entries) {
 		*txq_count = 0;
+		kfree(vmm_table);
 		return 0;
 	}
 
 	if (wilc->quit)
 		goto out_update_cnt;
 
-	if (ac_balance(wilc, ac_desired_ratio))
+	if (ac_balance(wilc, ac_desired_ratio)) {
+		kfree(vmm_table);
 		return -EINVAL;
+	}
 
 	mutex_lock(&wilc->txq_add_to_head_cs);
 
@@ -1227,6 +1240,7 @@ out_unlock:
 
 out_update_cnt:
 	*txq_count = wilc->txq_entries;
+	kfree(vmm_table);
 	return ret;
 }
 
@@ -1398,7 +1412,7 @@ int wilc_wlan_firmware_download(struct wilc *wilc, const u8 *buffer,
 	u32 addr, size, size2, blksz;
 	u8 *dma_buffer;
 	int ret = 0;
-	u32 reg = 0;
+	u32 reg;
 
 	blksz = BIT(12);
 
@@ -1414,6 +1428,7 @@ int wilc_wlan_firmware_download(struct wilc *wilc, const u8 *buffer,
 	wilc->hif_func->hif_read_reg(wilc, WILC_GLB_RESET_0, &reg);
 	reg &= ~BIT(10);
 	ret = wilc->hif_func->hif_write_reg(wilc, WILC_GLB_RESET_0, reg);
+	msleep(200);
 	wilc->hif_func->hif_read_reg(wilc, WILC_GLB_RESET_0, &reg);
 	if (reg & BIT(10))
 		pr_err("%s: Failed to reset\n", __func__);
diff --git a/wlan.h b/wlan.h
index 053f747df332..d93b94587c95 100644
--- a/wlan.h
+++ b/wlan.h
@@ -245,8 +245,10 @@ static inline bool is_wilc3000(u32 id)
 #define WILC_TX_BUFF_SIZE	(64 * 1024)
 
 #define MODALIAS		"WILC_SPI"
-#define GPIO_NUM_CHIP_EN	94
-#define GPIO_NUM_RESET		60
+// #define GPIO_NUM_CHIP_EN	94
+// #define GPIO_NUM_RESET		60
+#define GPIO_NUM_CHIP_EN    8
+#define GPIO_NUM_RESET      7
 
 #define NQUEUES			4
 #define AC_BUFFER_SIZE		1000
diff --git a/wlan_cfg.c b/wlan_cfg.c
index 029ae7ae9a00..9d1abe692182 100644
--- a/wlan_cfg.c
+++ b/wlan_cfg.c
@@ -394,7 +394,7 @@ void wilc_wlan_cfg_indicate_rx(struct wilc *wilc, u8 *frame, int size,
 		rsp->type = WILC_CFG_RSP_STATUS;
 		rsp->seq_no = msg_id;
 		/* call host interface info parse as well */
-		pr_info("%s: Info message received\n", __func__);
+		//pr_info("%s: Info message received\n", __func__);
 		wilc_gnrl_async_info_received(wilc, frame - 4, size + 4);
 		break;
 
@@ -403,7 +403,7 @@ void wilc_wlan_cfg_indicate_rx(struct wilc *wilc, u8 *frame, int size,
 		break;
 
 	case WILC_RESP_MSG_TYPE_SCAN_COMPLETE:
-		pr_info("%s: Scan Notification Received\n", __func__);
+		//pr_info("%s: Scan Notification Received\n", __func__);
 		wilc_scan_complete_received(wilc, frame - 4, size + 4);
 		break;
 